{"time_seconds":155.88686418533325,"log":[{"role":"user","content":"Can you set up a webgl demo for me? I'd like an example of a basic webgl shader. Make sure the output is available in index.html, but you can install any packages necessary.","images":null},{"role":"assistant","tool_calls":[{"id":"872447982","type":"function","function":{"name":"create_file","arguments":"{\"filename\":\"index.html\",\"content\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>WebGL Demo</title>\\n    <style>\\n        body { margin: 0; }\\n        canvas { display: block; width: 100vw; height: 100vh; }\\n    </style>\\n</head>\\n<body>\\n<canvas id=\\\"gl-canvas\\\"></canvas>\\n<script src=\\\"webgl-utils.js\\\"></script>\\n<script src=\\\"main.js\\\"></script>\\n<script id=\\\"vertex-shader\\\" type=\\\"x-shader/x-vertex\\\">\\nattribute vec2 a_position;\\nvoid main() {\\n  gl_Position = vec4(a_position, 0, 1);\\n}\\n</script>\\n<script id=\\\"fragment-shader\\\" type=\\\"x-shader/x-fragment\\\">\\nprecision mediump float;\\nuniform vec4 u_color;\\nvoid main() {\\n  gl_FragColor = u_color;\\n}\\n</script>\\n</body>\\n</html>\"}"}},{"id":"220157553","type":"function","function":{"name":"create_file","arguments":"{\"filename\":\"main.js\",\"content\":\"const webglUtils = require('webgl-utils');\\nconst canvas = document.querySelector('#gl-canvas');\\n\\n// Initialize WebGL\\nconst gl = webglUtils.create3DContext(canvas);\\nif (!gl) {\\n    console.error(\\\"Failed to setup WebGL context\\\");\\n}\\n\\nfunction createProgramFromSources(gl, vertexShaderSource, fragmentShaderSource) {\\n  const vertShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\\n  const fragShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\\n\\n  // Create the shader program\\n  const prog = webglUtils.createProgramFromSources(gl, [vertShader, fragShader]);\\n  \\n  return prog;\\n}\\n\\nfunction createSquareVertexPositions() {\\n  const posBuffer = gl.createBuffer();\\n  gl.bindBuffer(gl.ARRAY_BUFFER, posBuffer);\\n  gl.bufferData(gl.ARRAY_BUFFER,\\n      new Float32Array([\\n          -0.5, -0.5,\\n           0.5, -0.5,\\n           0.5,  0.5,\\n           0.5,  0.5,\\n          -0.5,  0.5,\\n          -0.5, -0.5,\\n      ]),\\n      gl.STATIC_DRAW);\\n\\n  // Set up the position attribute\\n  const numComponents = 2;\\n  const type = gl.FLOAT;\\n  const normalize = false;\\n  const stride = 0;\\n  const offset = 0;\\n\\n  const posLoc = gl.getAttribLocation(gl.program, 'a_position');\\n  gl.vertexAttribPointer(posLoc, numComponents, type, normalize, stride, offset);\\n  gl.enableVertexAttribArray(posLoc);\\n\\n  return [posBuffer];\\n}\\n\\nfunction loadShader(gl, type, source) {\\n    const shader = gl.createShader(type);\\n    gl.shaderSource(shader, source);\\n    gl.compileShader(shader);\\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\\n        console.error('An error occurred while compiling the shaders:', gl.getShaderInfoLog(shader));\\n        gl.deleteShader(shader);\\n        return null;\\n    }\\n    return shader;\\n}\\n\\nfunction main() {\\n  const vertexShaderSource = document.querySelector('#vertex-shader').textContent;\\n  const fragmentShaderSource = document.querySelector('#fragment-shader').textContent;\\n\\n  // Create a program object and attach our vertex shader and fragment shader\\n  gl.program = createProgramFromSources(gl, vertexShaderSource, fragmentShaderSource);\\n\\n  const squareVertexPositions = createSquareVertexPositions();\\n\\n  // Clear the canvas before we start drawing on it.\\n  gl.clearColor(0, 0, 0, 1);\\n  gl.clearDepth(1.0);\\n  gl.enable(gl.DEPTH_TEST);\\n\\n  // Draw a clear color screen\\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\\n\\n  // Set the drawing position to the \\\"center\\\" of the canvas.\\n  gl.uniform2f(webglUtils.locateUniform(gl.program, 'u_resolution'), gl.canvas.width, gl.canvas.height);\\n\\n  // Draw a rectangle\\n  const u_color = webglUtils.locateUniform(gl.program, 'u_color');\\n  gl.uniform4f(u_color, 1.0, 1.0, 0.0, 1.0); \\n  gl.drawArrays(gl.TRIANGLES, 0, squareVertexPositions.length * 3);\\n}\\n\\nmain();\"}"}},{"id":"814782008","type":"function","function":{"name":"task_complete","arguments":"{}"}}]},{"tool_call_id":"872447982","role":"tool","name":"create_file","content":[{"type":"text","text":"{\"message\": \"File index.html created successfully\"}","annotations":null}]},{"tool_call_id":"220157553","role":"tool","name":"create_file","content":[{"type":"text","text":"{\"message\": \"File main.js created successfully\"}","annotations":null}]}]}