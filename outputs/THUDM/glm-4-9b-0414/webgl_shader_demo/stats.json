{"time_seconds":47.09566044807434,"log":[{"role":"user","content":"Can you set up a webgl demo for me? I'd like an example of a basic webgl shader. Make sure the output is available in index.html, but you can install any packages necessary.","images":null},{"role":"assistant","content":"\nSure! Let's create a simple WebGL demo with a basic shader that draws a rotating triangle on a canvas. We will set up everything within an HTML file.\n\nHere are the steps we'll follow:\n1. Create an `index.html` file.\n2. Add a script to draw a WebGL context.\n3. Set up vertex and fragment shaders for rendering a triangle.\n4. Implement a function to rotate the triangle over time.\n\nLet's begin with the code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebGL Demo</title>\n    <style>\n        canvas {\n            display: block;\n            width: 100%;\n            height: 100vh;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"glCanvas\"></canvas>\n    <script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\n        attribute vec4 a_position;\n        uniform mat4 u_rotationMatrix;\n        \n        void main() {\n            gl_Position = u_rotationMatrix * a_position;\n        }\n    </script>\n    <script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\n        precision mediump float;\n        void main() {\n            gl_FragColor = vec4(1, 0, 0, 1); // Red\n        }\n    </script>\n    <script>\n        const canvas = document.getElementById('glCanvas');\n        const gl = canvas.getContext('webgl');\n\n        if (!gl) {\n            alert('Unable to initialize WebGL. Your browser may not support it.');\n        }\n\n        const vertexShaderSource = document.getElementById('vertex-shader').text;\n        const fragmentShaderSource = document.getElementById('fragment-shader').text;\n\n        function compileShader(source, type) {\n            const shader = gl.createShader(type);\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n                console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n                gl.deleteShader(shader);\n                return null;\n            }\n            \n            return shader;\n        }\n\n        const vertexShader = compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n        const fragmentShader = compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n\n        function createProgram(vertexShader, fragmentShader) {\n            const program = gl.createProgram();\n            gl.attachShader(program, vertexShader);\n            gl.attachShader(program, fragmentShader);\n            gl.linkProgram(program);\n\n            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n                console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\n                return null;\n            }\n\n            gl.useProgram(program);\n            return program;\n        }\n\n        const program = createProgram(vertexShader, fragmentShader);\n\n        function setBuffersAndAttributes(program) {\n            const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\n            const buffer = gl.createBuffer();\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n            // Set up triangle vertices\n            const positions = [\n                0.0,  1.0,\n               -1.0, -1.0,\n                1.0, -1.0,\n            ];\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n            gl.enableVertexAttribArray(positionAttributeLocation);\n            gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n        }\n\n        function setUniforms(program) {\n            const matrixLocation = gl.getUniformLocation(program, 'u_rotationMatrix');\n            // We will update this each frame\n            return matrixLocation;\n        }\n\n        function degToRad(degrees) {\n            return degrees * Math.PI / 180;\n        }\n\n        let rotationMatrix = mat4.create();\n        setBuffersAndAttributes(program);\n        const matrixLocation = setUniforms(program);\n\n        function render(time) {\n            time *= 0.001; // convert to seconds\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            mat4.identity(rotationMatrix);\n            mat4.rotateY(rotationMatrix, rotationMatrix, time);\n            \n            gl.uniformMatrix4fv(matrixLocation, false, rotationMatrix);\n\n            gl.drawArrays(gl.TRIANGLES, 0, 3);\n            requestAnimationFrame(render);\n        }\n        requestAnimationFrame(render);\n\n        // Include the gl-matrix library here\n        const mat4 = {\n            create: function() {\n                return new Float32Array([\n                    1, 0, 0, 0,\n                    0, 1, 0, 0,\n                    0, 0, 1, 0,\n                    0, 0, 0, 1\n                ]);\n            },\n            identity: function(out) {\n                out[0] = 1; out[1] = 0; out[2] = 0; out[3] = 0;\n                out[4] = 0; out[5] = 1; out[6] = 0; out[7] = 0;\n                out[8] = 0; out[9] = 0; out[10] = 1; out[11] = 0;\n                out[12] = 0; out[13] = 0; out[14] = 0; out[15] = 1;\n                return out;\n            },\n            rotateY: function(out, a, rad) {\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                \n                const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n                const a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n                const a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n\n                // Perform axis-specific matrix multiplication\n                out[0] = c * a00 + s * a20;\n                out[1] = c * a01 + s * a21;\n                out[2] = c * a02 + s * a22;\n                out[3] = c * a03 + s * a23;\n                out[4] =   a10;\n                out[5] =   a11;\n                out[6] =   a12;\n                out[7] =   a13;\n                out[8] = -s * a00 + c * a20;\n                out[9] = -s * a01 + c * a21;\n                out[10] = -s * a02 + c * a22;\n                out[11] = -s * a03 + c * a23;\n\n                return out;\n            }\n        };\n    </script>\n</body>\n</html>\n```\n\nThis code sets up a WebGL context and draws a rotating red triangle. The shader is simple: the vertex shader applies a rotation matrix to the vertices, and the fragment shader just outputs a solid color (red in this case).\n\nTo run this, save the code above as `index.html` and open it in a web browser. You should see a red rotating triangle on the screen.\n\nThis example does not use any external libraries for WebGL, but if you need more advanced features or find that integrating an external library is necessary, let me know!","images":null},{"role":"assistant","content":"","images":null}]}