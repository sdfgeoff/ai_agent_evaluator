{"run_date":"2025-05-17T08:22:32.693612712Z","time_seconds":20.0,"log":[{"role":"user","content":"Can you set up a webgl demo for me? I'd like an example of a basic webgl shader. Make sure the output is available in index.html, but you can install any packages necessary.","images":null},{"role":"assistant","content":"\nSure, I'll create a simple WebGL demo with a basic shader for you. This will include an HTML file to display the WebGL context and a script that sets up the shaders.\n\nFirst, let's create the `index.html` file:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebGL Demo</title>\n    <style>\n        body { margin: 0; }\n        canvas { display: block; }\n    </style>\n</head>\n<body onload=\"initWebGL()\">\n<canvas id=\"glCanvas\"></canvas>\n<script src=\"shader.js\"></script>\n</body>\n</html>\n```\n\nNow, let's create the `shader.js` file with a basic WebGL shader program:\n\n```javascript\nconst canvas = document.getElementById('glCanvas');\nconst gl = canvas.getContext('webgl');\n\nif (!gl) {\n    console.error(\"WebGL is not supported by your browser.\");\n}\n\n// Vertex Shader source code\nconst vsSource = `\nattribute vec4 aVertexPosition;\nvoid main() {\n    gl_Position = aVertexPosition;\n}\n`;\n\n// Fragment Shader source code\nconst fsSource = `\nprecision mediump float;\nuniform vec4 uColor;\nvoid main() {\n    gl_FragColor = uColor;\n}\n`;\n\nfunction initWebGL() {\n    // Initialize shaders\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    // Create the shader program\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n        return;\n    }\n\n    // Setup buffers and attributes\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    const positions = [\n        -1.0,  1.0,\n         1.0,  1.0,\n         1.0, -1.0,\n        -1.0, -1.0,\n    ];\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    const position = gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(position);\n\n    // Set the clear color to sky blue\n    gl.clearColor(0.5, 0.7, 1.0, 1.0);\n\n    // Clear the canvas\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // Use the shader program\n    gl.useProgram(shaderProgram);\n\n    // Set the uniform color (red)\n    const color = gl.getUniformLocation(shaderProgram, 'uColor');\n    gl.uniform4f(color, 1.0, 0.0, 0.0, 1.0);\n\n    // Draw the rectangle\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n}\n\nfunction loadShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n```\n\nThe `index.html` file sets up a basic canvas where WebGL can be drawn on. The `shader.js` file contains the vertex and fragment shaders for rendering a filled rectangle in red.\n\nTo run this demo, save the HTML code in an `index.html` file and the JavaScript code in a `shader.js` file within the same directory. Open the `index.html` file in a web browser that supports WebGL to see the result of your simple shader program.","images":null},{"role":"assistant","content":"","images":null}],"finish_reason":"empty_content"}